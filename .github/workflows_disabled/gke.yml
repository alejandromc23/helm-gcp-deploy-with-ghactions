name: Build, Publish and Deploy a chart to gke

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: <cluster-name>
  GKE_ZONE: <kubernetes-cluster-zone>
  DEPLOYMENT_NAME: <deployment-name>
  IMAGE: <image-name>
  CHART: <chart-name>

jobs:
  setup-build-publish-deploy:
    name: Build, push and deploy routine-checker-chart'
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Get the GKE credentials so we can deploy to the cluster
      - id: auth
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GKE_SA_KEY }}

      # Setup gcloud CLI
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0

      - name: Use gcloud CLI
        run: gcloud info

      # helper for authentication
      - run: gcloud --quiet auth configure-docker

      # Get the GKE credentials so we can deploy to the cluster
      - run: gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"

      # Build the Docker image
      - name: Build
        run: |-
          docker build \
            --tag "eu.gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" \
            .

      # Push the Docker image to Google Container Registry
      - name: Publish
        run: |-
          docker push "eu.gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA"

      # Install helm
      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

      - name: Install Helm secrets plugin
        run: helm plugin install https://github.com/jkroepke/helm-secrets --version v3.5.0

      # Deploy the Docker image to the GKE cluster
      - name: Deploy
        run: |
          cd helm/
          helm secrets upgrade $CHART . \
            --install --wait --atomic -f values.yaml -f secrets.yaml \
            --set image.tag=$GITHUB_SHA --wait
          kubectl rollout status deployment/$DEPLOYMENT_NAME
          kubectl get services -o wide